pipeline {
	agent { node { label 'DEPLOY-TEST' } }
	environment {
		HTTPS_PROXY="http://amec.zscaler.philips.com:9480/"
		HTTP_PROXY="http://amec.zscaler.philips.com:9480/"
                ORG_LOWER = params.CLOUD_FOUNDRY_ORG.toLowerCase()
                SPACE_LOWER = params.CLOUD_FOUNDRY_SPACE.toLowerCase()
	}
	parameters {
		booleanParam(name: 'DESTROY_SERVICES', defaultValue: false, description: 'Destroy services')
		booleanParam(name: 'DESTROY_APPS', defaultValue: false, description: 'Destroy Apps')
 		string(name:"CLOUD_FOUNDRY_ORG", defaultValue: "client-NGCAP", description: 'CF ORG')
 		string(name:"CLOUD_FOUNDRY_SPACE", defaultValue: "ngcap-hsdp", description: 'CF SPACE')
		string(name:'NGCAP_JS_VERSION',defaultValue: "0.2.528")
		string(name:'NGCAP_CS_VERSION',defaultValue: "0.2.746")
		string(name:'NGCAP_STARTER_VERSION',defaultValue: "0.2.719")
	}
	stages {
                stage('Secure Agent') {
                        agent { node ( "${env.NODE_NAME}-work" ) }
                       	stages {
				stage('Init Variables File') {
					steps {
						withCredentials([usernamePassword(credentialsId: 'CLOUDFOUNDRY', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
							dir('src') {
								powershell "(Get-Content -Path .\\default.auto.tfvars) -replace 'CLOUD_FOUNDRY_ORG        = \"\"','CLOUD_FOUNDRY_ORG        = \"${params.CLOUD_FOUNDRY_ORG}\"' | Set-Content -Path .\\default.auto.tfvars"	
								powershell "(Get-Content -Path .\\default.auto.tfvars) -replace 'CLOUD_FOUNDRY_SPACE      = \"\"','CLOUD_FOUNDRY_SPACE      = \"${params.CLOUD_FOUNDRY_SPACE}\"' | Set-Content -Path .\\default.auto.tfvars"	
	
								bat "echo %USERNAME%>CF_USERNAME"
								bat "echo %PASSWORD%>CF_PASSWORD"

                                                       		 powershell '''
Get-Content CF_USERNAME | Set-Item -Path Env:CF_USERNAME
Get-Content CF_PASSWORD | Set-Item -Path Env:CF_PASSWORD
Get-ChildItem Env:CF_USERNAME
(Get-Content -Path .\\default.auto.tfvars) -replace 'CLOUD_FOUNDRY_USERNAME   = ""',"CLOUD_FOUNDRY_USERNAME   = `"$Env:CF_USERNAME`"" | Set-Content -Path .\\default.auto.tfvars
(Get-Content -Path .\\default.auto.tfvars) -replace 'CLOUD_FOUNDRY_PASSWORD   = ""',"CLOUD_FOUNDRY_PASSWORD   = `"$Env:CF_PASSWORD`"" | Set-Content -Path .\\default.auto.tfvars
(Get-Content -Path .\\default.auto.tfvars) -replace 'DOCKER_REGISTRY_USERNAME = ""',"DOCKER_REGISTRY_USERNAME = `"$Env:CF_USERNAME`"" | Set-Content -Path .\\default.auto.tfvars
(Get-Content -Path .\\default.auto.tfvars) -replace 'DOCKER_REGISTRY_PASSWORD = ""',"DOCKER_REGISTRY_PASSWORD = `"$Env:CF_PASSWORD`"" | Set-Content -Path .\\default.auto.tfvars
'''
								bat "del CF_USERNAME"
								bat "del CF_PASSWORD"

								powershell "Add-Content -Path .\\default.auto.tfvars -Value \"DOCKER_REGISTRY_NAMESPACE = \"docker.na1.hsdp.io/\"+$Env:ORG_LOWER+\"_\"+$Env:SPACE_LOWER"
							}
						}
		
					}
					
				}


				stage('Destroy Services') {
					when { expression { "${params.DESTROY_SERVICES}" == "true" } }
					steps {
						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {
								        bat "copy /Y templates\\services.json main.tf.json"	
					 				bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=ngcap\\backends\\backend-ngcap-master-services.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"

									bat ( script:"E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve -target=module.postgres-service", returnStatus: true)
									bat ( script:"E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve -target=module.metrics-service", returnStatus: true)
									bat ( script:"E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve -target=module.logdrainer-service", returnStatus: true)
									bat ( script:"E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve -target=module.rabbitmq-service", returnStatus: true)
									bat ( script:"E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve -target=module.redis-service", returnStatus: true)
									bat ( script:"E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve -target=module.cloud-space", returnStatus: true)

								 }

							}
						}

					}
				
				}


			  	stage('Destroy SysConfig') {

                                        when { expression { "${params.DESTROY_APPS}" == "true" } }

					steps {

						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {

									bat "copy /Y templates\\sample-app.json main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_ENV#','' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_PORTS#','\"5000\"' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP-NAME#','sys-config' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-NAME#','sysconfig' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-TAG#','${params.NGCAP_CS_VERSION}' | Set-Content main.tf.json"
									bat "type main.tf.json"
									bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=ngcap\\backends\\backend-ngcap-master-sysconfig.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve"
								}
							}
						}
					}

				}



			  	stage('Destroy Fhir Gateway') {

                                        when { expression { "${params.DESTROY_APPS}" == "true" } }

					steps {

						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {

									bat "copy /Y templates\\sample-app.json main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_ENV#','' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_PORTS#','\"5000\"' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP-NAME#','fhir-gw' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-NAME#','fhirgw' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-TAG#','${params.NGCAP_CS_VERSION}' | Set-Content main.tf.json"
									bat "type main.tf.json"
									bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=ngcap\\backends\\backend-ngcap-master-fhirgw.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve"
								}
							}
						}
					}

				}


			  	stage('Destroy Generic Gateway') {

                                        when { expression { "${params.DESTROY_APPS}" == "true" } }

					steps {

						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {

									bat "copy /Y templates\\sample-app.json main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_ENV#','' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_PORTS#','\"5000\"' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP-NAME#','generic-gw' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-NAME#','genericgw' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-TAG#','${params.NGCAP_CS_VERSION}' | Set-Content main.tf.json"
									bat "type main.tf.json"
									bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=ngcap\\backends\\backend-ngcap-master-generic.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve"
								}
							}
						}
					}

				}


			  	stage('Destroy Generic Support Gateway') {

                                        when { expression { "${params.DESTROY_APPS}" == "true" } }

					steps {

						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {
									bat "copy /Y templates\\sample-app.json main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_ENV#','' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_PORTS#','\"5000\"' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP-NAME#','generic-support-gw' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-NAME#','genericgw' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-TAG#','${params.NGCAP_CS_VERSION}' | Set-Content main.tf.json"
									bat "type main.tf.json"
									bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=ngcap\\backends\\backend-ngcap-master-genericsupport.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve"
								}
							}
						}
					}

				}

			  	stage('Destroy Calc Trace') {

                                        when { expression { "${params.DESTROY_APPS}" == "true" } }

					steps {

						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {
									bat "copy /Y templates\\sample-app.json main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_ENV#','' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_PORTS#','\"5000\"' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP-NAME#','calc-trace' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-NAME#','calctrace' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-TAG#','${params.NGCAP_CS_VERSION}' | Set-Content main.tf.json"
									bat "type main.tf.json"
									bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=ngcap\\backends\\backend-ngcap-master-calctrace.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve"
								}
							}
						}
					}

				}


			  	stage('Destroy Calc Config') {

                                        when { expression { "${params.DESTROY_APPS}" == "true" } }

					steps {

						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {
									bat "copy /Y templates\\sample-app.json main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_ENV#','' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_PORTS#','\"5000\"' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP-NAME#','calc-config' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-NAME#','calcconfig' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-TAG#','${params.NGCAP_CS_VERSION}' | Set-Content main.tf.json"
									bat "type main.tf.json"
									bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=ngcap\\backends\\backend-ngcap-master-calcconfig.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve"
								}
							}
						}
					}

				}


			  	stage('Destroy Dispatcher') {

                                        when { expression { "${params.DESTROY_APPS}" == "true" } }

					steps {

						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {
									bat "copy /Y templates\\sample-app.json main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_ENV#','' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_PORTS#','\"5000\"' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP-NAME#','dispatcher' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-NAME#','dispatcher' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-TAG#','${params.NGCAP_CS_VERSION}' | Set-Content main.tf.json"
									bat "type main.tf.json"
									bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=ngcap\\backends\\backend-ngcap-master-dispatcher.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve"
								}
							}
						}
					}

				}

			  	stage('Destroy Execution') {

                                        when { expression { "${params.DESTROY_APPS}" == "true" } }

					steps {

						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {
									bat "copy /Y templates\\sample-app.json main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_ENV#','' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_PORTS#','\"5000\"' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP-NAME#','execution' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-NAME#','execution' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-TAG#','${params.NGCAP_CS_VERSION}' | Set-Content main.tf.json"
									bat "type main.tf.json"
									bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=ngcap\\backends\\backend-ngcap-master-execution.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve"
								}
							}
						}
					}

				}

			  	stage('Destroy Outbound') {

                                        when { expression { "${params.DESTROY_APPS}" == "true" } }

					steps {

						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {
									bat "copy /Y templates\\sample-app.json main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_ENV#','' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_PORTS#','\"5000\"' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP-NAME#','outbound' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-NAME#','outbound' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-TAG#','${params.NGCAP_CS_VERSION}' | Set-Content main.tf.json"
									bat "type main.tf.json"
									bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=ngcap\\backends\\backend-ngcap-master-outbound.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve"
								}
							}
						}
					}

				}


			  	stage('Destroy Outbound Config') {

                                        when { expression { "${params.DESTROY_APPS}" == "true" } }

					steps {

						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {
									bat "copy /Y templates\\sample-app.json main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_ENV#','' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_PORTS#','\"5000\"' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP-NAME#','outbound-config' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-NAME#','outboundconfig' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-TAG#','${params.NGCAP_CS_VERSION}' | Set-Content main.tf.json"
									bat "type main.tf.json"
									bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=ngcap\\backends\\backend-ngcap-master-outbound-config.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve"
								}
							}
						}
					}

				}


			  	stage('Destroy Scheduler') {

                                        when { expression { "${params.DESTROY_APPS}" == "true" } }

					steps {

						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {
									bat "copy /Y templates\\sample-app.json main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_ENV#','' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_PORTS#','\"5000\"' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP-NAME#','scheduler' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-NAME#','scheduler' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-TAG#','${params.NGCAP_CS_VERSION}' | Set-Content main.tf.json"
									bat "type main.tf.json"
									bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=ngcap\\backends\\backend-ngcap-master-outbound-config.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve"
								}
							}
						}
					}

				}


			  	stage('Destroy Authentication') {

                                        when { expression { "${params.DESTROY_APPS}" == "true" } }

					steps {

						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {
									bat "copy /Y templates\\sample-app.json main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_ENV#','' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_PORTS#','\"5000\"' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP-NAME#','authenticationsvc' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-NAME#','authenticationsvc' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-TAG#','${params.NGCAP_JS_VERSION}' | Set-Content main.tf.json"
									bat "type main.tf.json"
									bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=ngcap\\backends\\backend-ngcap-master-authentication.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve"
								}
							}
						}
					}

				}

			  	stage('Destroy SystemConfigUI') {

                                        when { expression { "${params.DESTROY_APPS}" == "true" } }

					steps {

						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {
									bat "copy /Y templates\\sample-app.json main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_ENV#','' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_PORTS#','\"8080\"' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP-NAME#','ngcap' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-NAME#','systemconfigui' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-TAG#','${params.NGCAP_JS_VERSION}' | Set-Content main.tf.json"
									bat "type main.tf.json"
									bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=ngcap\\backends\\backend-ngcap-master-system-config-ui.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve"
								}
							}
						}
					}

				}


			  	stage('Destroy TenantConfig') {

                                        when { expression { "${params.DESTROY_APPS}" == "true" } }

					steps {

						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {
									bat "copy /Y templates\\sample-app.json main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_ENV#','' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP_PORTS#','\"8080\"' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP-NAME#','tenant-config' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-NAME#','tenantconfig' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-TAG#','${params.NGCAP_CS_VERSION}' | Set-Content main.tf.json"
									bat "type main.tf.json"
									bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=ngcap\\backends\\backend-ngcap-master-tenant-config.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve"
								}
							}
						}
					}

				}


			  	stage('Destroy API Gateway') {

                                        when { expression { "${params.DESTROY_APPS}" == "true" } }

					steps {

						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {
									bat "copy /Y templates\\api-gateway.json main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#APP-NAME#','tenant-config' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-NAME#','tenantconfig' | Set-Content main.tf.json"
									powershell "(Get-Content -Path main.tf.json) -replace '#IMAGE-TAG#','${params.NGCAP_CS_VERSION}' | Set-Content main.tf.json"
									bat "type main.tf.json"
									bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=ngcap\\backends\\backend-ngcap-master-tenant-config.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform destroy -auto-approve"
								}
							}
						}
					}

				}

			}


			post {
				always {
					dir('src') {
						bat 'if exist default.auto.tfvars ( del /q default.auto.tfvars ) else ( echo no default.auto.tfvars )'
					}
			
				}
			
			}

		}
	}

}
