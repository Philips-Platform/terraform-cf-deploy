pipeline {
	agent { node { label 'DEPLOY-TEST' } }
	environment {
		HTTPS_PROXY="http://amec.zscaler.philips.com:9480/"
		HTTP_PROXY="http://amec.zscaler.philips.com:9480/"
	}
	parameters {
		booleanParam(name: 'INIT_SERVICES', defaultValue: false, description: 'Initialize services')
 		string(name:"CLOUD_FOUNDRY_ORG", defaultValue: "client-NGCAP", description: 'CF ORG')
 		string(name:"CLOUD_FOUNDRY_SPACE", defaultValue: "ngcap-hsdp", description: 'CF SPACE')
	}
	stages {
                stage('Secure Agent') {
                        agent { node ( "${env.NODE_NAME}-work" ) }
                       	stages {
				stage('Init Variables File') {

					steps {
						withCredentials([usernamePassword(credentialsId: 'CLOUDFOUNDRY', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
							dir('src') {
								powershell "(Get-Content -Path .\\default.auto.tfvars) -replace 'CLOUD_FOUNDRY_ORG        = \"\"','CLOUD_FOUNDRY_ORG        = \"${params.CLOUD_FOUNDRY_ORG}\"' | Set-Content -Path .\\default.auto.tfvars"	
								powershell "(Get-Content -Path .\\default.auto.tfvars) -replace 'CLOUD_FOUNDRY_SPACE      = \"\"','CLOUD_FOUNDRY_SPACE      = \"${params.CLOUD_FOUNDRY_SPACE}\"' | Set-Content -Path .\\default.auto.tfvars"	
	
								bat "echo %USERNAME%>CF_USERNAME"
								bat "echo %PASSWORD%>CF_PASSWORD"

                                                       		 powershell '''
Get-Content CF_USERNAME | Set-Item -Path Env:CF_USERNAME
Get-Content CF_PASSWORD | Set-Item -Path Env:CF_PASSWORD
Get-ChildItem Env:CF_USERNAME
(Get-Content -Path .\\default.auto.tfvars) -replace 'CLOUD_FOUNDRY_USERNAME   = ""',"CLOUD_FOUNDRY_USERNAME   = `"$Env:CF_USERNAME`"" | Set-Content -Path .\\default.auto.tfvars
(Get-Content -Path .\\default.auto.tfvars) -replace 'CLOUD_FOUNDRY_PASSWORD   = ""',"CLOUD_FOUNDRY_PASSWORD   = `"$Env:CF_PASSWORD`"" | Set-Content -Path .\\default.auto.tfvars
(Get-Content -Path .\\default.auto.tfvars) -replace 'DOCKER_REGISTRY_USERNAME = ""',"DOCKER_REGISTRY_USERNAME = `"$Env:CF_USERNAME`"" | Set-Content -Path .\\default.auto.tfvars
(Get-Content -Path .\\default.auto.tfvars) -replace 'DOCKER_REGISTRY_PASSWORD = ""',"DOCKER_REGISTRY_PASSWORD = `"$Env:CF_PASSWORD`"" | Set-Content -Path .\\default.auto.tfvars
'''
								bat "del CF_USERNAME"
								bat "del CF_PASSWORD"

								powershell "Add-Content -Path .\\default.auto.tfvars -Value \"DOCKER_REGISTRY_NAMESPACE = \"docker.na1.hsdp.io/client-ngcap_dev-deploy\""
							}
						}
		
					}
					
				}

				stage('Create Services') {
					when {
						 expression { "${params.INIT_SERVICES}" == "true" }
					}
					steps {
						 withCredentials([file(credentialsId: 'terraform_creds', variable: 'TERRAFORMRC')]) {
                                                        dir('src') {
								 withEnv(["TF_CLI_CONFIG_FILE=${TERRAFORMRC}"]) {
								        bat "copy /Y templates\\services.json main.tf.json"	
					 				bat 'E:\\terraform_0.12.25_windows_amd64\\terraform.exe init -plugin-dir=E:\\terraform-plugins -backend-config=backends\\backend-ngcap.hcl'
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform validate"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform apply -auto-approve -target=module.postgres-service"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform apply -auto-approve -target=module.metrics-service"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform apply -auto-approve -target=module.logdrainer-service"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform apply -auto-approve -target=module.rabbitmq-service"
									bat "E:\\terraform_0.12.25_windows_amd64\\terraform apply -auto-approve -target=module.redis-service"

								 }

							}
						}

					}
				
				}

			}


			post {
				always {
					dir('src') {
						bat 'if exist default.auto.tfvars ( del /q default.tfvars ) else ( echo no default.auto.tfvars )'
					}
			
				}
			
			}

		}
	}

}
