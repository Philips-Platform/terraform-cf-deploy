def create_backend_workspace(sub_section){
    withEnv(["TERRAFORM_WORKSPACE_SUBSECTION=${sub_section}"]){
        sh './scripts/terraform-create-workspace.sh'
    }
}
def update_backend_workspace(target_file_name, sub_section){
    sh "cp ./backends/backend.hcl ${target_file_name}"
    sh "sed -i 's/#spacename#/$CFSpaceName/g' ${target_file_name}"
    sh "sed -i 's/#appname#/monitoring/g' ${target_file_name}"
}

def deploy(manifestJson, backendFile, destroy = true){
    // update the services to be deployed
    sh "cp ${manifestJson} ./main.tf.json"
    sh "terraform init -plugin-dir=../plugins/linux_amd64 -backend-config=${backendFile}"
    // terraform validation
    sh 'terraform validate'
    sh "terraform refresh"
    if(destroy){
        sh "terraform destroy -auto-approve"
    }
    sh "terraform apply -auto-approve"
}

def secrets = [
    [path: 'cf/fb56e376-14c1-42bf-961a-3e716e863933/secret/terraform-secrets', secretValues: [
            [envVar: 'TERRAFORMRC', vaultKey: 'terraform-rc'],
            [envVar: 'TERRAFORMINPUT', vaultKey: 'terraform-input-file']]],
    [path: 'cf/fb56e376-14c1-42bf-961a-3e716e863933/secret/terraform-cloud', secretValues: [
            [envVar: 'TERRAFORM_API_TOKEN', vaultKey: 'api-token']]]
]
node('docker') {
    properties([
            parameters([string(
                defaultValue: 'Internal', 
                description: 'Prometheus Internal/External', 
                name: 'prometheus_deployment_mode', 
                trim: true),
                string(
                defaultValue: 'sandbox5', 
                description: 'CF Space name', 
                name: 'CFSpaceName', 
                trim: true)
            ])
        ])
    /* Requires the Docker Pipeline plugin to be installed */
    stage('checkout'){
        checkout scm
    }
    stage('CF deployment') {
        withVault([vaultSecrets: secrets]) {
            try{
                docker.image('hashicorp/terraform:latest').inside('--entrypoint="" --user=root') {
                    dir("${env.WORKSPACE}/src"){
                        // add curl, jq and bash
                        sh 'apk add --update curl jq bash'
                        sh "./scripts/store-file.sh terraform-secret.rc terraform-input-secret.json"
                        def pwds = readJSON file: "terraform-input-secret.json"
                        withEnv(["TF_CLI_CONFIG_FILE=./terraform-secret.rc",
                            "TF_CLI_ARGS=-var-file=./terraform-input-secret.json", 
                            "TF_VAR_CLOUD_FOUNDRY_SPACE=$CFSpaceName", 
                            "TF_VAR_stop_apps=false","CLOUD_FOUNDRY_API=${pwds['CLOUD_FOUNDRY_API']}", 
                            "CLOUD_FOUNDRY_USERNAME=${pwds['CLOUD_FOUNDRY_USERNAME']}",
                            "CLOUD_FOUNDRY_PASSWORD=${pwds['CLOUD_FOUNDRY_PASSWORD']}"]){

                            // create terraform backend workspaces in terraform cloud
                            create_backend_workspace("monitoring")
                            update_backend_workspace("backend-monitoring.hcl", "monitoring")
                               
                            // trigger the deployment of terraform scripts
                            deploy("./monitoring-templates/prometheus-internal.json", "./backends/backend-monitoring.hcl", true)
                        }
                        sh './scripts/clean-up.sh'
                    }
                }
            }
            finally{
                sh 'sudo chown $USER -R ./src/.terraform'
            }
        }
    }
}